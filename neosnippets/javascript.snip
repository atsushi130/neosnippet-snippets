snippet :f
options head
  ${1:#:method_name}: function(${2:#:attribute}) {
  }

snippet function
options head
    function ${1:#:method_name}(${2:#:arg}) {${3:#:TARGET}
    }

snippet if
options head
  if (${1:true}) {${2:#:TARGET}
  }

snippet if-else
abbr ife
options head
  if (${1:#:condition}) {${2:#:TARGET}
  } else {${4:#:TARGET}
  }

snippet else
options head
    else {${1:#:TARGET}
    }

snippet for
options head
  for (var ${1:i} = 0; $1 < ${2:#:Things}.length; ++$1) {${3:#:TARGET}
  }

snippet .forEach
options head
    forEach((${1:element}) => {${2:#:TARGET}
    });

snippet forin
options head
  for (var ${1:i} in ${2:#:Things}) {${3:#:TARGET}
  }

snippet while
options head
  while (${1:true}) {${2:#:TARGET}
  }

snippet switch
options head
  switch (${1:#:var}) {
    case ${2:#:val}:${3:#:TARGET}
      break;
  }

snippet try
options head
  try {${2:#:TARGET}
  } catch (${2:e}) {${3:#:TARGET}
  }

snippet try_finally
options head
  try {${2:#:TARGET}
  } catch (${2:e}) {${3:#:TARGET}
  } finally {${4:#:TARGET}
  }


snippet key-value
abbr :,
options word
  ${1:#:value_name}: ${0:#:value},

#snippet key
#options word
#  ${1:#:key}: "${2:#:value}"}${3:, }

snippet setTimeout-function
options head
  setTimeout(function() { ${0} }, ${1:10});

snippet debugger
alias db
options head
  debugger;

snippet log
options head
  console.log(${0});

snippet console-trace
alias ct
options head
  console.trace();

snippet console-error
alias ce
options head
  console.error();

snippet console-warn
alias cw
options head
  console.warn();

snippet console-info
alias ci
options head
  console.info();

snippet iife
options head
  (function(${1}) {
    'use strict';
    
  })(${2});

snippet js
options head
  JSON.stringify(${1:TARGET}, ${2:null}, ${3:2});

snippet jsc
options head
  console.log(JSON.stringify(${1:TARGET}, ${2:null}, ${3:2}));

snippet     class
abbr        class {...}
options     head
  class ${1:#:NAME} {
    constructor(${2:#:ARGS}) {
      
    }
  }

snippet     class-extends
abbr        class extends {...}
options     head
  class ${1:#:NAME} extends ${2:#:SuperClass} {
    constructor(${3:#:ARGS}) {
      
    }
  }

snippet     static
options     head
  static ${1:#:NAME}(${2:#:ARGS}) {
    
  }

snippet     set
options     head
  set ${1:#:NAME}(${2:#:ARGS}) {
    
  }

snippet     get
options     head
  get ${1:#:NAME}() {
  }

snippet     import
options     head
  import { ${1:members} } from "${2:module}";
